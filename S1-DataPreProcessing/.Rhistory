# Taking care of the missing data
# Importing the dataset
dataset = read.csv('Data.csv')
# Importing the dataset
dataset = read.csv('Data.csv')
# Importing the dataset
dataset = read.csv('./Data.csv')
# Importing the dataset
dataset = read.csv('Data.csv')
# Importing the dataset
dataset = read.csv('Data.csv')
ls
# Importing the dataset
dataset = read.csv('Data.csv')
setwd("~/Documents/Research/GitHub/machine-learning-research/S1-DataPreProcessing")
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of the missing data
View(dataset)
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of the missing data
dataset$Age = ifelse(
is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = True)),
dataset$Age
)
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of the missing data
dataset$Age = ifelse(
is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age
)
dataset$Salary = ifelse(
is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary
)
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of the missing data
dataset$Age = ifelse(
is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age
)
dataset$Salary = ifelse(
is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary
)
View(dataset)
## Importing the dataset
dataset = read.csv('Data.csv')
## Taking care of the missing data
dataset$Age = ifelse(
is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age
)
dataset$Salary = ifelse(
is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary
)
## Encoding categorical data
dataset$Country = factor(
dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)
)
dataset$Purchased = factor(
dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1)
)
## Splitting the dataset into the training set and test set
install.packages('caTools')
## Importing the dataset
dataset = read.csv('Data.csv')
## Taking care of the missing data
dataset$Age = ifelse(
is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age
)
dataset$Salary = ifelse(
is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary
)
## Encoding categorical data
dataset$Country = factor(
dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)
)
dataset$Purchased = factor(
dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1)
)
## Splitting the dataset into the training set and test set
# install.packages('caTools')
library('caTools')
set.seed(123)
split = sample.split
training_set = subset(dataset, split == TRUE)
## Importing the dataset
dataset = read.csv('Data.csv')
## Taking care of the missing data
dataset$Age = ifelse(
is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age
)
dataset$Salary = ifelse(
is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary
)
## Encoding categorical data
dataset$Country = factor(
dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)
)
dataset$Purchased = factor(
dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1)
)
## Splitting the dataset into the training set and test set
# install.packages('caTools')
library('caTools')
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = .8)
training_set = subset(dataset, split == TRUE)
test_set = seubset(dataset, split == FALSE)
## Importing the dataset
dataset = read.csv('Data.csv')
## Taking care of the missing data
dataset$Age = ifelse(
is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age
)
dataset$Salary = ifelse(
is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary
)
## Encoding categorical data
dataset$Country = factor(
dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)
)
dataset$Purchased = factor(
dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1)
)
## Splitting the dataset into the training set and test set
# install.packages('caTools')
library('caTools')
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = seubset(dataset, split == FALSE)
## Importing the dataset
dataset = read.csv('Data.csv')
## Taking care of the missing data
dataset$Age = ifelse(
is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age
)
dataset$Salary = ifelse(
is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary
)
## Encoding categorical data
dataset$Country = factor(
dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)
)
dataset$Purchased = factor(
dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1)
)
## Splitting the dataset into the training set and test set
# install.packages('caTools')
library('caTools')
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = .8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
View(test_set)
View(training_set)
## Importing the dataset
dataset = read.csv('Data.csv')
## Taking care of the missing data
dataset$Age = ifelse(
is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age
)
dataset$Salary = ifelse(
is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary
)
## Encoding categorical data
dataset$Country = factor(
dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)
)
dataset$Purchased = factor(
dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1)
)
## Splitting the dataset into the training set and test set
# install.packages('caTools')
library('caTools')
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = .8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
## Feature Scaling
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
